import { useEffect, useMemo, useState } from 'react';
import { supabase } from './lib/supabase';
import Modal from './components/Modal';
import { Input } from './components/Input';

const STATUS = ['booked', 'in_transit', 'delivered', 'invoiced', 'paid'];

function fmtMoney(n){ return new Intl.NumberFormat('en-US',{style:'currency',currency:'USD'}).format(Number(n)||0); }

export default function App() {
  // data
  const [rows, setRows] = useState(null);
  const [savingId, setSavingId] = useState(null);

  // filters
  const [qOrigin, setQOrigin] = useState('');
  const [qDest, setQDest] = useState('');
  const [qStatus, setQStatus] = useState('');

  // create modal state
  const [openCreate, setOpenCreate] = useState(false);
  const [form, setForm] = useState({ origin:'', destination:'', rate:'', status:'booked' });
  const [creating, setCreating] = useState(false);
  const [errorMsg, setErrorMsg] = useState('');

  async function fetchLoads() {
    const { data, error } = await supabase
      .from('loads')
      .select('id,origin,destination,rate,status')
      .order('id');
    if (error) {
      console.error(error);
      setRows([]);
    } else {
      setRows(data || []);
    }
  }

  useEffect(()=>{ fetchLoads(); },[]);

  async function markDelivered(id){
    setSavingId(id);
    const { error } = await supabase.from('loads').update({ status: 'delivered' }).eq('id', id);
    setSavingId(null);
    if (!error) fetchLoads();
  }

  // client-side filtering (simple & fast for our dataset)
  const filtered = useMemo(() => {
    if (!rows) return null;
    return rows.filter(r => {
      const okO = qOrigin ? r.origin.toLowerCase().includes(qOrigin.toLowerCase()) : true;
      const okD = qDest ? r.destination.toLowerCase().includes(qDest.toLowerCase()) : true;
      const okS = qStatus ? String(r.status||'') === qStatus : true;
      return okO && okD && okS;
    });
  }, [rows, qOrigin, qDest, qStatus]);

  // create load handlers
  function setField(k, v){ setForm(prev => ({ ...prev, [k]: v })); }

  async function submitCreate(e){
    e?.preventDefault?.();
    setErrorMsg('');

    if (!form.origin.trim() || !form.destination.trim()) {
      setErrorMsg('Origin and Destination are required.');
      return;
    }
    const rateNum = Number(form.rate);
    if (Number.isNaN(rateNum) || rateNum <= 0) {
      setErrorMsg('Rate must be a positive number.');
      return;
    }
    if (!STATUS.includes(form.status)) {
      setErrorMsg('Invalid status.');
      return;
    }

    setCreating(true);
    const { error } = await supabase.from('loads').insert({
      origin: form.origin.trim(),
      destination: form.destination.trim(),
      rate: rateNum,
      status: form.status
    });
    setCreating(false);
    if (error) {
      console.error(error);
      setErrorMsg(error.message || 'Failed to create load.');
      return;
    }
    setOpenCreate(false);
    setForm({ origin:'', destination:'', rate:'', status:'booked' });
    fetchLoads();
  }

  if (!filtered) {
    return <div className="min-h-screen grid place-items-center">Loading…</div>;
  }

  return (
    <div className="min-h-screen bg-gray-50 text-gray-900 p-6">
      <div className="mx-auto max-w-6xl">
        <header className="mb-6 flex items-center justify-between">
          <h1 className="text-2xl font-bold">DispatcherHub</h1>
          <nav className="flex gap-2">
            <button className="rounded border bg-black px-4 py-2 text-white">Loads</button>
            <button className="rounded border bg-white px-4 py-2">Invoices</button>
          </nav>
        </header>

        {/* Filters + Create */}
        <div className="mb-4 flex flex-wrap gap-3">
          <input
            placeholder="Origin"
            className="w-64 rounded border px-3 py-2"
            value={qOrigin}
            onChange={e=>setQOrigin(e.target.value)}
          />
          <input
            placeholder="Destination"
            className="w-64 rounded border px-3 py-2"
            value={qDest}
            onChange={e=>setQDest(e.target.value)}
          />
          <select
            className="w-48 rounded border px-3 py-2"
            value={qStatus}
            onChange={e=>setQStatus(e.target.value)}
          >
            <option value="">All status</option>
            {STATUS.map(s => <option key={s} value={s}>{s.replace(/_/g,' ')}</option>)}
          </select>

          <div className="grow" />
          <button
            onClick={()=>setOpenCreate(true)}
            className="rounded border bg-white px-4 py-2"
          >
            Create Load
          </button>
        </div>

        {/* Table */}
        <div className="overflow-hidden rounded-lg border bg-white">
          <table className="min-w-full text-sm">
            <thead className="bg-gray-100">
              <tr>
                <th className="px-3 py-2 text-left font-medium">ID</th>
                <th className="px-3 py-2 text-left font-medium">Origin</th>
                <th className="px-3 py-2 text-left font-medium">Destination</th>
                <th className="px-3 py-2 text-left font-medium">Rate</th>
                <th className="px-3 py-2 text-left font-medium">Status</th>
                <th className="px-3 py-2 text-left font-medium">Action</th>
              </tr>
            </thead>
            <tbody>
              {filtered.map(r => (
                <tr key={r.id} className="border-t">
                  <td className="px-3 py-2">{r.id}</td>
                  <td className="px-3 py-2">{r.origin}</td>
                  <td className="px-3 py-2">{r.destination}</td>
                  <td className="px-3 py-2">{fmtMoney(r.rate)}</td>
                  <td className="px-3 py-2">
                    <span className="inline-flex items-center rounded bg-gray-100 px-2 py-0.5 text-xs">
                      {String(r.status||'').replace(/_/g,' ') || 'unknown'}
                    </span>
                  </td>
                  <td className="px-3 py-2">
                    <button
                      onClick={()=>markDelivered(r.id)}
                      disabled={savingId===r.id || r.status==='delivered'}
                      className="rounded border bg-white px-3 py-1 disabled:opacity-50"
                    >
                      {savingId===r.id ? 'Saving…' : 'Mark Delivered'}
                    </button>
                  </td>
                </tr>
              ))}
              {filtered.length===0 && (
                <tr><td colSpan="6" className="px-3 py-6 text-center text-gray-500">No loads match your filter.</td></tr>
              )}
            </tbody>
          </table>
        </div>

        <button onClick={fetchLoads} className="mt-4 rounded border bg-white px-3 py-1">Refresh</button>
      </div>

      {/* Create Load Modal */}
      <Modal
        open={openCreate}
        onClose={()=>!creating && setOpenCreate(false)}
        title="Create Load"
        footer={
          <div className="flex justify-end gap-2">
            <button onClick={()=>setOpenCreate(false)} disabled={creating} className="rounded border bg-white px-4 py-2">Cancel</button>
            <button onClick={submitCreate} disabled={creating} className="rounded bg-black px-4 py-2 text-white">
              {creating ? 'Creating…' : 'Create'}
            </button>
          </div>
        }
      >
        <form onSubmit={submitCreate} className="grid gap-3">
          {!!errorMsg && <div className="rounded-md bg-red-50 px-3 py-2 text-sm text-red-700">{errorMsg}</div>}
          <Input label="Origin" value={form.origin} onChange={e=>setField('origin', e.target.value)} />
          <Input label="Destination" value={form.destination} onChange={e=>setField('destination', e.target.value)} />
          <Input label="Rate (USD)" type="number" step="0.01" value={form.rate} onChange={e=>setField('rate', e.target.value)} />
          <label className="text-sm">
            <span className="mb-1 block font-medium text-gray-700">Status</span>
            <select
              className="w-full rounded-md border px-3 py-2"
              value={form.status}
              onChange={e=>setField('status', e.target.value)}
            >
              {STATUS.map(s => <option key={s} value={s}>{s.replace(/_/g,' ')}</option>)}
            </select>
          </label>
        </form>
      </Modal>
    </div>
  );
}
